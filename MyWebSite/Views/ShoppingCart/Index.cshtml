@model ShoppingCart
@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="container">
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="fw-bold">Shopping Cart</h2>
            <p class="text-muted">Review and update your items before checkout</p>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <div class="dashboard-card">
                @if (Model.Items.Any())
                {
                    <div class="table-responsive">
                        <table class="table cart-table">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Subtotal</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Items)
                                {
                                    <tr class="cart-item" data-product-id="@item.ProductId">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                @* <img src="@item.ImageUrl" alt="@item.ProductName" class="cart-product-image me-3"> *@
                                                <span>@item.ProductName</span>
                                            </div>
                                        </td>
                                        <td class="product-price">$@item.Price.ToString("F2")</td>
                                        <td>
                                            <div class="d-flex align-items-center mb-3">
                                                <h5 class="mb-0 me-3">Quantity</h5>
                                                <div class="input-group" style="width: 130px;">
                                                    <button class="btn btn-outline-secondary" type="button" id="decrease-quantity">-</button>
                                                    <input type="text" class="form-control text-center" id="product-quantity" value="1">
                                                    <button class="btn btn-outline-secondary" type="button" id="increase-quantity">+</button>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="product-subtotal">$@item.Subtotal.ToString("F2")</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-danger remove-item">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="bi bi-cart3 display-4 text-muted"></i>
                        <h4 class="mt-3">Your cart is empty</h4>
                        <p class="text-muted">Looks like you haven't added any items to your cart yet.</p>
                        <a asp-controller="Products" asp-action="Index" class="btn btn-primary mt-3">
                            Continue Shopping
                        </a>
                    </div>
                }
            </div>
        </div>

        <div class="col-lg-4">
            <div class="dashboard-card">
                <h5 class="mb-3">Order Summary</h5>
                <div class="d-flex justify-content-between mb-2">
                    <span>Subtotal (@Model.TotalItems items)</span>
                    <span id="cart-subtotal">$@Model.TotalAmount.ToString("F2")</span>
                </div>
                <div class="d-flex justify-content-between mb-3">
                    <span>Shipping</span>
                    <span>Free</span>
                </div>
                <hr>
                <div class="d-flex justify-content-between mb-3">
                    <strong>Total</strong>
                    <strong id="cart-total">$@Model.TotalAmount.ToString("F2")</strong>
                </div>

                <div class="mb-3">
                    <label for="discount-code" class="form-label">Discount Code</label>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" id="discount-code" placeholder="Enter code">
                        <button class="btn btn-outline-secondary" type="button" id="apply-discount">Apply</button>
                    </div>
                </div>

                <div class="d-grid gap-2">
                    <a asp-controller="Checkout" asp-action="Index" class="btn btn-primary">
                        Proceed to Checkout
                    </a>
                    <a asp-controller="Products" asp-action="Index" class="btn btn-outline-secondary">
                        Continue Shopping
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Handle quantity increase
            document.querySelectorAll('.quantity-increase').forEach(button => {
                button.addEventListener('click', function() {
                    const row = this.closest('.cart-item');
                    const quantityInput = row.querySelector('.quantity-input');
                    quantityInput.value = parseInt(quantityInput.value) + 1;
                    updateCartItem(row, quantityInput.value);
                });
            });

            // Handle quantity decrease
            document.querySelectorAll('.quantity-decrease').forEach(button => {
                button.addEventListener('click', function() {
                    const row = this.closest('.cart-item');
                    const quantityInput = row.querySelector('.quantity-input');
                    if (parseInt(quantityInput.value) > 1) {
                        quantityInput.value = parseInt(quantityInput.value) - 1;
                        updateCartItem(row, quantityInput.value);
                    }
                });
            });

            // Handle direct input change
            document.querySelectorAll('.quantity-input').forEach(input => {
                input.addEventListener('change', function() {
                    const row = this.closest('.cart-item');
                    if (parseInt(this.value) < 1) {
                        this.value = 1;
                    }
                    updateCartItem(row, this.value);
                });
            });

            // Handle remove item
            document.querySelectorAll('.remove-item').forEach(button => {
                button.addEventListener('click', function() {
                    const row = this.closest('.cart-item');
                    updateCartItem(row, 0);  // 0 quantity will remove the item
                    row.remove();
                });
            });

            // Function to update cart item via AJAX
            function updateCartItem(row, quantity) {
                const productId = row.dataset.productId;

                fetch('/ShoppingCart/UpdateQuantity', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ productId: parseInt(productId), quantity: parseInt(quantity) })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update subtotal for the item
                        if (quantity > 0) {
                            row.querySelector('.product-subtotal').textContent = '$' + data.itemSubtotal.toFixed(2);
                        }

                        // Update cart totals
                        document.getElementById('cart-subtotal').textContent = '$' + data.totalAmount.toFixed(2);
                        document.getElementById('cart-total').textContent = '$' + data.totalAmount.toFixed(2);

                        // Update cart icon if you have one
                        const cartCountElement = document.querySelector('.cart-count');
                        if (cartCountElement) {
                            cartCountElement.textContent = data.totalItems;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error updating cart:', error);
                });
            }
        });
    </script>
}